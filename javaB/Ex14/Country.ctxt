#BlueJ class context
comment0.target=Country
comment0.text=\r\n\ This\ class\ represents\ a\ Mamn14\r\n\ @author\ David\ Weisman\r\n\ @version\ 10-06-2023\r\n
comment1.params=name
comment1.target=Country(java.lang.String)
comment1.text=\r\n\ Creates\ a\ new\ Country\ object\r\n\ The\ head\ points\ to\ null\r\n\ @param\ name\ the\ name\ of\ the\ country\r\n
comment10.params=
comment10.target=double\ longestDistance()
comment10.text=\r\n\ Calculate\ the\ bigest\ distance\ between\ two\ cities.\r\n\ @return\ the\ bigest\ distance\ between\ two\ cities.\r\n
comment11.params=city
comment11.target=int\ numCitiesNorthOf(java.lang.String)
comment11.text=\r\n\ Calculate\ how\ many\ cities\ are\ north\ of\ a\ certain\ city.\r\n\ @param\ the\ certain\ city.\r\n\ @return\ teh\ number\ of\ the\ cities\ that\ are\ north\ of\ a\ certain\ city.\r\n
comment12.params=
comment12.target=City\ southernmostCity()
comment12.text=\r\n\ Calculate\ the\ southernmost\ city\u05E5\r\n\ @return\ the\ southernmost\ city\u05E5\r\n
comment13.params=
comment13.target=java.lang.String\ getCountryName()
comment13.text=\r\n\ Return\ the\ name\ of\ the\ country.\r\n\ @return\ the\ name\ of\ the\ country.\r\n
comment14.params=
comment14.target=int\ getNumOfCities()
comment14.text=\r\n\ Return\ the\ numbere\ of\ citites\ in\ the\ country.\r\n\ @return\ the\ numbere\ of\ citites\ in\ the\ country.\r\n
comment15.params=cityNode
comment15.target=int\ getNumOfCities(CityNode)
comment16.params=d1\ d2
comment16.target=boolean\ wereCitiesEstablishedBeforeOrAfter(Date,\ Date)
comment16.text=\r\n\ Calculates\ if\ there\ is\ a\ city\ between\ the\ two\ given\ dates.\r\n\ @param\ d1\ the\ first\ date.\r\n\ @param\ d2\ the\ second\ date.\r\n\ @return\ true\ or\ false\ if\ there\ is\ or\ there\ isn't\ a\ city\ between\ the\ two\ given\ dates.\r\n
comment17.params=city1\ city2
comment17.target=void\ unifyCities(java.lang.String,\ java.lang.String)
comment17.text=\r\n\ Connecting\ two\ cities\ into\ one\ city\r\n\ @param\ city1\ the\ first\ city.\r\n\ @param\ city2\ the\ second\ city.\r\n
comment18.params=cityName
comment18.target=void\ removeCity(java.lang.String)
comment19.params=city
comment19.target=CityNode\ getCityNodeByName(java.lang.String)
comment2.params=
comment2.target=java.lang.String\ toString()
comment2.text=\r\n\ Returns\ a\ String\ that\ represent\ the\ cities\ in\ the\ Country.\r\n\ If\ there\ is\ no\ cities\ returns\ "There\ are\ no\ cities\ in\ this\ country."\r\n\ @return\ String\ that\ represent\ the\ cities\ in\ the\ Country.\r\n
comment20.params=
comment20.target=boolean\ isEmpty()
comment21.params=
comment21.target=int\ establishMaxDiff()
comment21.text=\r\n\ Calculates\ the\ biggest\ difference\ in\ days\ between\ the\ dates\ of\ the\ establishment\ of\ any\ two\ cities\ in\ the\ country\ .\r\n\ @return\ the\ biggest\ difference\ in\ days\ between\ the\ dates\ of\ the\ establishment\ of\ any\ two\ cities\ in\ the\ country\ .\r\n
comment3.params=name\ day\ month\ year\ xCityCenter\ yCityCenter\ xCentralStation\ yCentralStation\ numOfResidents\ numOfNeighborhoods
comment3.target=boolean\ addCity(java.lang.String,\ int,\ int,\ int,\ int,\ int,\ int,\ int,\ long,\ int)
comment3.text=\r\n\ Add\ city\ to\ the\ country.\r\n\ @param\ name\ of\ the\ city.\r\n\ @param\ day\ the\ day\ of\ date\ established.\r\n\ @param\ month\ the\ month\ of\ date\ established.\r\n\ @param\ year\ the\ year\ of\ date\ established.\r\n\ @param\ xCityCenter\ the\ X\ coordinate\ of\ center\ of\ the\ city.\r\n\ @param\ yCityCenter\ the\ Y\ coordinate\ of\ center\ of\ the\ city.\r\n\ @param\ xCentralStation\ the\ X\ coordinate\ of\ CentralStation\ of\ the\ city.\r\n\ @param\ yCentralStation\ the\ Y\ coordinate\ of\ CentralStation\ of\ the\ city.\r\n\ @param\ numOfResidents\ the\ number\ of\ residents\ of\ the\ city.\r\n\ @param\ numOfNeighborhoods\ the\ number\ of\ neighborhoods\ of\ the\ city.\r\n
comment4.params=startNode\ cityName\ date
comment4.target=CityNode\ findLexicalPlace(CityNode,\ java.lang.String,\ Date)
comment5.params=head\ date
comment5.target=CityNode\ findTheLastNewerCity(CityNode,\ Date)
comment6.params=city
comment6.target=boolean\ isExists(City)
comment7.params=head\ city
comment7.target=boolean\ isExists(CityNode,\ City)
comment8.params=temp\ newNode
comment8.target=boolean\ sameDate(CityNode,\ CityNode)
comment9.params=
comment9.target=long\ getNumOfResidents()
comment9.text=\r\n\ Calculating\ the\ number\ of\ residents.\r\n\ @return\ the\ number\ of\ residents.\r\n
numComments=22
